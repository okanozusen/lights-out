{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/OWNERS-PC/OneDrive/Desktop/SpringBoard/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.5\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function restartGame() {\n    setBoard(createBoard());\n  }\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      return boardCopy;\n    });\n  }\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You Won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(/*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tblBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","restartGame","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","boardCopy","flipCell","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","tblBoard","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/mnt/c/Users/OWNERS-PC/OneDrive/Desktop/SpringBoard/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function restartGame() {\n    setBoard(createBoard());\n  }\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n\n      return boardCopy;\n    });\n  }\n\n  if (hasWon()) {\n    return (\n      <div className=\"Board\">\n        <div>You Won!</div>\n        <button onClick={restartGame}>Restart Game</button>\n      </div>\n    );\n  }\n\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <div>\n      <button onClick={restartGame}>Restart Game</button>\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}